%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: bfbabd22c62c640a6ba459d46825055b, type: 3}
  m_Name: README
  m_EditorClassIdentifier: 
  header:
    title: Unity Gaming Services Use Cases
    icon: {fileID: 2800000, guid: 83f0684dab5534e2492f651aaaf4a151, type: 3}
  sections:
  - subHeader1: Welcome to Unity Gaming Services Use Cases
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: This Unity Gaming Services (UGS) Samples package contains a collection
      of samples designed to show you how you can use multiple UGS products to solve
      common game development challenges. These samples implement typical backend
      game use cases and game design elements, show how to resolve specific development
      tasks, and highlight the efficiency you can achieve in your game backend by
      integrating different UGS packages in your project.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Getting Started
    subHeader3: 
    body: To view each sample in action, open the Start Here scene in the Assets
      directory and hit Play. To review an individual sample, find the use case directory
      in Assets/Use Case Samples and view the README file for implementation details.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: This project is tied to a Unity Services Account that allows
      read-only testing in the Editor. The messages "Unable to link project to Unity
      Services" in Project Settings and "Unable to access Unity Services" in Build
      Settings are expected. Additionally, you will be unable to create a device
      build of this project.'
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: List of Samples
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList:
    - body: A/B Test on Game Difficulty
      bodyFormat: 1
      bulletList:
      - body: Segment players into multiple test groups in order to determine which
          variation of a specific variable is the most engaging to the players (in
          this case, the amount of XP required for leveling up).
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Battle Pass
      bodyFormat: 1
      bulletList:
      - body: A seasonal reward tier system with a free track and a premium track.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Cloud AI Mini Game
      bodyFormat: 1
      bulletList:
      - body: Server authoritative gameplay in a simple Tic-Tac-Toe game played against
          AI running on UGS with persistent state, Currency rewards, stats, and straightforward
          AI.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Command Batching
      bodyFormat: 1
      bulletList:
      - body: Group game Commands into a queue and process on the server in a single
          batch to reduce the volume and frequency of server calls made during gameplay.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Daily Rewards
      bodyFormat: 1
      bulletList:
      - body: A prevalent engagement feature that can boost retention by showing
          players an escalating series of rewards incentivizes them to keep logging
          in to claim better and better prizes.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Idle Clicker Game
      bodyFormat: 1
      bulletList:
      - body: Update server authoritative game state in real time, similar to idle
          clicker and social games.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: In-Game Mailbox
      bodyFormat: 1
      bulletList:
      - body: Demonstrates a way that developers can send in-game messages to their
          players, including with gifts of various game currencies and inventory
          items.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Loot Boxes
      bodyFormat: 1
      bulletList:
      - body: Reward players with a random Economy currency using Cloud Code to perform
          the Economy grants.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Loot Boxes With Cooldown
      bodyFormat: 1
      bulletList:
      - body: Grant players random collections of both Currencies and Inventory Items
          at timed intervals.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Over-The-Air Content Delivery
      bodyFormat: 1
      bulletList:
      - body: Add new downloaded content to a game while the game is running.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Rewarded Ads With Unity Mediation
      bodyFormat: 1
      bulletList:
      - body: Offer players opportunity to boost level end rewards by interacting
          with a reward booster meter and watching a rewarded ad.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Seasonal Events
      bodyFormat: 1
      bulletList:
      - body: Update game content remotely based on timed special events.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Starter Packs
      bodyFormat: 1
      bulletList:
      - body: Allow players to purchase a Starter Pack using Cloud Code to implement
          the one-time-only purchase.
        bodyFormat: 0
        bulletList: []
      linkList: []
    - body: Virtual Shop
      bodyFormat: 1
      bulletList:
      - body: 'Demonstrates a key feature in many games: allowing players to use
          in-game currency to purchase items and resources to facilitate a server-authoritative
          in-game economy.'
        bodyFormat: 0
        bulletList: []
      linkList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: Tested with Unity 2020.3 for PC and Mac.
    bodyFormat: 2
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Using your own Unity Services Account
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: These samples use UGS packages which have already been configured so you
      can easily explore the use case samples provided.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: To use these implementations in your own project, you will need to setup
      and configure the services used in your own UGS Dashboard. Learn more about
      each configuration in the README asset within each samples directory.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Feedback and Sample Requests
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: If you have feedback or would like us to demonstrate a new use-case with
      a sample, please let us know in the Unity Gaming Services Forum. We even have
      a helpful tag to filter by!
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: Unity Gaming Services Forum
      url: https://forum.unity.com/forums/unity-gaming-services-general-discussion.561/
    - linkText: Posts Tagged with "unity gaming services samples"
      url: https://forum.unity.com/tags/unity-gaming-services-samples/
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: Additionally, you can submit feedback directly from the samples project
      by using the feedback button in the bottom left corner of each scene during
      Play Mode.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: Cloud Diagnostics & User Reporting
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: Unity's Cloud Diagnostics service helps to ensure the quality of this project
      by automatically sending diagnostic data to the dashboard when you encounter
      errors. Additionally, the User Reporting feature lets you submit a screenshot
      and detailed feedback about a sample by clicking the Feedback button in any
      of the Sample scenes during Play Mode.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList: []
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: To set up Cloud Diagnostics and User Reporting in your own project, follow
      the set-up instructions provided in the dashboard.
    bodyFormat: 0
    boxCallout: 
    bulletList: []
    linkList:
    - linkText: Setting up Cloud Diagnostics
      url: https://unitytech.github.io/clouddiagnostics/userreporting/UnityCloudDiagnosticsSettingUp.html
  - subHeader1: 
    subHeader2: 
    subHeader3: 
    body: 
    bodyFormat: 0
    boxCallout: 'Note: If you don''t want to automatically send exception data, disable
      Cloud Diagnostics under Project Settings > Services > Cloud Diagnostics.'
    bulletList: []
    linkList: []
